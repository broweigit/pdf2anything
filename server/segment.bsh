#@ String input_dir
#@ String output_dir
#@ String model_path

import trainableSegmentation.WekaSegmentation;
import trainableSegmentation.utils.Utils;
import ij.io.FileSaver;
import ij.IJ;
import ij.ImagePlus;
import ij.plugin.frame.RoiManager;
import ij.process.ImageProcessor;
import ij.plugin.filter.GaussianBlur;

inputDir = new File(input_dir);
outputDir = new File(output_dir);
modelPath = new File(model_path);
 
// starting time
startTime = System.currentTimeMillis();
 
// caculate probabilities?
getProbs = false;

// create segmentator
segmentator = new WekaSegmentation();
// load classifier
segmentator.loadClassifier( modelPath.getCanonicalPath() );
 
// get list of input images
listOfFiles = inputDir.listFiles();
for ( i = 0; i < listOfFiles.length; i++ )
{
    // process only files (do not go into sub-folders)
    if( listOfFiles[ i ].isFile() )
    {
        // try to read file as image
        image = IJ.openImage( listOfFiles[i].getCanonicalPath() );
        
        if( image != null )
        {                   
            // crop the image to 2048 * 2048
            ip = image.getProcessor();
            targetWidth = 2048;
            targetHeight = 2048;
            ip.setRoi(0, 0, targetWidth, targetHeight);
            ip = ip.crop();
            image.setProcessor(ip);

            // apply classifier and get results (0 indicates number of threads is auto-detected)
            result = segmentator.applyClassifier( image, 0, getProbs );

            if( !getProbs )
                // assign same LUT as in GUI
                result.setLut( Utils.getGoldenAngleLUT() );

            // save result as TIFF in output folder
            outputFileName = listOfFiles[ i ].getName().replaceFirst("[.][^.]+$", "") + ".png";
            new FileSaver( result ).saveAsPng( outputDir.getPath() + File.separator + outputFileName );
 
            // force garbage collection (important for large images)
            result = null; 
            image = null;
            System.gc();
        }
    }
}
// print elapsed time
estimatedTime = System.currentTimeMillis() - startTime;
IJ.log( "** Finished segmenting pics in " + estimatedTime + " ms **" );