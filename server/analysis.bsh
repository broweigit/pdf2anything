#@ String input_dir
#@ String output_dir
#@ int erosion
#@ int dilation

#@output answer
#@output file_names
#@output particles

import ij.io.FileSaver;
import ij.IJ;
import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.process.ImageStatistics;
import ij.plugin.filter.ThresholdToSelection;
import ij.plugin.filter.ParticleAnalyzer;
import ij.measure.ResultsTable;
import ij.measure.Measurements;


inputDir = new File(input_dir);
outputDir = new File(output_dir);

answer = new ArrayList();
file_names = new ArrayList();
particles = new ArrayList();

// starting time
startTime = System.currentTimeMillis();
 
// get list of input images
listOfFiles = inputDir.listFiles();
for ( i = 0; i < listOfFiles.length; i++ )
{
    // process only files (do not go into sub-folders)
    if( listOfFiles[ i ].isFile() )
    {
        // try to read file as image
        image = IJ.openImage( listOfFiles[i].getCanonicalPath() );
        
        if( image != null )
        {                   
            ImageProcessor ip = image.getProcessor();
            int[] histogram = ip.getHistogram();

            temp = new ArrayList();
            temp.add(histogram[0]);
            temp.add(histogram[1]);
            temp.add(histogram[2]);
            answer.add(temp);
            file_names.add(listOfFiles[i].getName());

            ip.threshold(0);
            ip.invert();

            for(k = 0; k < dilation; k++)
                ip.dilate();

            for(k = 0; k < erosion; k++)
                ip.erode();

            image.setProcessor(ip);

            // analyze particles

            measurements = Measurements.AREA;
            rt = new ResultsTable();

            pa = new ParticleAnalyzer(0, measurements, rt, 100, Double.POSITIVE_INFINITY);
            pa.analyze(image);

            size_hist = new ArrayList();
            int rowCount = rt.getCounter();
            // read each row from ResultsTable
            for (int row = 0; row < rowCount; row++) {
                String rowData = rt.getRowAsString(row);
                String[] rowSplited = rowData.split("\t");
                size_hist.add(Integer.parseInt(rowSplited[1]));
            }

            // Store the particle analysis results
            particles.add(size_hist);

            // save result as TIFF in output folder
            outputFileName = listOfFiles[ i ].getName().replaceFirst("[.][^.]+$", "") + ".tiff";
            new FileSaver( image ).saveAsTiff( outputDir.getPath() + File.separator + outputFileName );
        }

        // force garbage collection (important for large images)
        result = null; 
        image = null;
        System.gc();
    }
}

// print elapsed time
estimatedTime = System.currentTimeMillis() - startTime;
IJ.log( "** Finished analizing in " + estimatedTime + " ms **" );